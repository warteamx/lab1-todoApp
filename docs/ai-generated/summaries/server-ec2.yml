# CI/CD for Express TypeScript server → AWS EC2 (via SSH + PM2)
# - Lint → Test → Build → Package/Upload artifact → Deploy to EC2 → Health check
# - Uses Node 20
# - Deploy guarded to main with environment protection

name: Server - CI/CD (EC2)

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'server/**'
      - '.github/workflows/server-ec2.yml'

permissions:
  contents: read

concurrency:
  group: server-ec2
  cancel-in-progress: true

env:
  APP_DIR: server

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.APP_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.APP_DIR }}/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Lint
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ${{ env.APP_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.APP_DIR }}/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Run tests
        run: npm run test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ${{ env.APP_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ env.APP_DIR }}/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Build
        run: npm run build

      - name: Pack production bundle
        run: |
          mkdir -p ../artifact
          cp -r dist ../artifact/dist
          cp package.json ../artifact/
          if [ -f package-lock.json ]; then cp package-lock.json ../artifact/; fi
          if [ -f .env.example ]; then cp .env.example ../artifact/.env.example; fi
          tar -czf ../server-artifact.tgz -C ../artifact .

      - name: Upload artifact (for debugging)
        uses: actions/upload-artifact@v4
        with:
          name: server-artifact
          path: server-artifact.tgz
          if-no-files-found: error

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: http://${{ secrets.EC2_HOST }}:${{ secrets.SERVER_PORT }}/health
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: server-artifact
          path: .

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy artifact to EC2
        run: |
          scp -o StrictHostKeyChecking=no server-artifact.tgz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/server-artifact.tgz

      - name: Deploy on EC2 (extract + install + restart)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          set -euo pipefail
          APP_PATH="${EC2_DEPLOY_PATH:-${{ secrets.EC2_DEPLOY_PATH }}}"
          mkdir -p "$APP_PATH"
          cd "$APP_PATH"
          tar -xzf /tmp/server-artifact.tgz -C "$APP_PATH"
          # Install production deps & restart via PM2
          if command -v pnpm >/dev/null 2>&1; then MGR=pnpm; elif command -v yarn >/dev/null 2>&1; then MGR=yarn; else MGR=npm; fi
          if [ "$MGR" = "npm" ]; then npm ci --omit=dev || npm i --omit=dev; else $MGR i --prod || $MGR i; fi
          if ! command -v pm2 >/dev/null 2>&1; then sudo npm i -g pm2; fi
          pm2 startOrReload ecosystem.config.js || pm2 start dist/server.js --name expo-lab-server --time
          pm2 save
          EOF

      - name: Health check
        run: |
          echo "Checking http://${{ secrets.EC2_HOST }}:${{ secrets.SERVER_PORT }}/health"
          http_status=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}:${{ secrets.SERVER_PORT }}/health)
          if [ "$http_status" -ne 200 ]; then
            echo "Health check failed with status $http_status" >&2
            exit 1
          fi
