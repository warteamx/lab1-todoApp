name: 🚀 Release

on:
  push:
    branches:
      - main
      - develop
      - next
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode'
        required: false
        default: false
        type: boolean

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [client, server]

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.package }}/package-lock.json'

      - name: 📥 Install Dependencies
        run: |
          cd ${{ matrix.package }}
          npm ci

      - name: 🔍 Lint
        run: |
          cd ${{ matrix.package }}
          npm run lint

      - name: 🧪 Test
        run: |
          cd ${{ matrix.package }}
          npm run test:ci || npm run test

  release:
    name: 🔖 Semantic Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event.inputs.dry_run == true

    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🔧 Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🔖 Semantic Release (Dry Run)
        if: github.event.inputs.dry_run == true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run release:dry

      - name: 🔖 Semantic Release
        if: github.event.inputs.dry_run != true
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run release

  build-client:
    name: 📱 Build Client
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new-release-published == 'true'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3
        with:
          ref: main

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'

      - name: 📥 Install Dependencies
        run: |
          cd client
          npm ci

      - name: 🔨 Build Version Info
        env:
          BUILD_NUMBER: ${{ github.run_number }}
          NODE_ENV: production
        run: |
          cd client
          npm run build:version

      - name: 🌐 Build Web
        env:
          EXPO_PUBLIC_APP_VERSION: ${{ needs.release.outputs.new-release-version }}
          EXPO_PUBLIC_BUILD_NUMBER: ${{ github.run_number }}
          EXPO_PUBLIC_BUILD_DATE: ${{ github.event.head_commit.timestamp }}
          EXPO_PUBLIC_COMMIT_HASH: ${{ github.sha }}
          EXPO_PUBLIC_BUILD_ENV: production
        run: |
          cd client
          npm run build:web

      - name: 📤 Upload Web Build
        uses: actions/upload-artifact@v3
        with:
          name: client-web-build
          path: client/web/dist
          retention-days: 30

  build-server:
    name: 🖥️ Build Server
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new-release-published == 'true'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3
        with:
          ref: main

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'

      - name: 📥 Install Dependencies
        run: |
          cd server
          npm ci

      - name: 🔨 Build Version Info
        env:
          BUILD_NUMBER: ${{ github.run_number }}
          NODE_ENV: production
        run: |
          cd server
          npm run build:version

      - name: 🏗️ Build Server
        run: |
          cd server
          npm run build

      - name: 📤 Upload Server Build
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: |
            server/dist
            server/package.json
            server/package-lock.json
          retention-days: 30

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [release, build-client, build-server]
    if: needs.release.outputs.new-release-published == 'true' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: 🚀 Deploy Notification
        run: |
          echo "🎉 Deploying version ${{ needs.release.outputs.new-release-version }}"
          echo "📱 Client build: ./artifacts/client-web-build"
          echo "🖥️ Server build: ./artifacts/server-build"

      # Add your deployment steps here
      # Example: Deploy to AWS, Vercel, Heroku, etc.
